"use strict";

/*
  –°–µ—Ç—å —Ñ–∞—Å—Ç—Ñ—É–¥–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –≥–∞–º–±—É—Ä–≥–µ—Ä–æ–≤.
  –û—Å–Ω–æ–≤–∞ (–±—É–ª–æ—á–∫–∞) –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
	- –º–∞–ª–µ–Ω—å–∫–∞—è (+30 –¥–µ–Ω–µ–≥, +50 –∫–∞–ª–æ—Ä–∏–π)
	- –±–æ–ª—å—à–∞—è (+50 –¥–µ–Ω–µ–≥, +100 –∫–∞–ª–æ—Ä–∏–π)
  –ì–∞–º–±—É—Ä–≥–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–æ–≤ –Ω–∞—á–∏–Ω–æ–∫ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
	- —Å—ã—Ä–æ–º (+15 –¥–µ–Ω–µ–≥, +20 –∫–∞–ª–æ—Ä–∏–π)
	- —Å–∞–ª–∞—Ç–æ–º (+20 –¥–µ–Ω–µ–≥, +5 –∫–∞–ª–æ—Ä–∏–π)
	- –º—è—Å–æ–º (+35 –¥–µ–Ω–µ–≥, +15 –∫–∞–ª–æ—Ä–∏–π)
  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –≥–∞–º–±—É—Ä–≥–µ—Ä –º–æ–∂–Ω–æ:
	- –ø–æ—Å—ã–ø–∞—Ç—å –ø—Ä–∏–ø—Ä–∞–≤–æ–π (+10 –¥–µ–Ω–µ–≥, +0 –∫–∞–ª–æ—Ä–∏–π)
	- –ø–æ–ª–∏—Ç—å —Å–æ—É—Å–æ–º (+15 –¥–µ–Ω–µ–≥, +5 –∫–∞–ª–æ—Ä–∏–π)
  –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≥–∞–º–±—É—Ä–≥–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É—Ç–µ –û–û–ü –ø–æ–¥—Ö–æ–¥,
  —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Hamburger, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –∏ —Ä–∞—Å—Å—á–µ—Ç–∞ –Ω—É–∂–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω.
  –ù–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–º—É jsDoc –æ–ø–∏—Å–∞–Ω–∏—é. –¢–æ –µ—Å—Ç—å –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å
  —É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
*/
/*
  –ö–ª–∞—Å—Å, –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–º–±—É—Ä–≥–µ—Ä–∞.
 */
class Hamburger {
 
  constructor(size, stuffing) {
    this._size = size;
    this._stuffing = stuffing;
    this._toppings = [];
    this._price;
  }
  //  * –î–æ–±–∞–≤–∏—Ç—å topping –∫ –≥–∞–º–±—É—Ä–≥–µ—Ä—É. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ topping, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω–∏ —Ä–∞–∑–Ω—ã–µ.
  addTopping(topping) {
    if (!this.toppings.includes(topping)) this.toppings.push(topping);
  }
  //  * –£–±—Ä–∞—Ç—å topping, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω–∞ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞

  // removeTopping(topping) {
  //   if (this.toppings.includes(topping)) {
  //     this.toppings.splice(this.toppings.indexOf(topping), 1);
  //     return this.toppings;
  //   }
  //   return this.toppings;
  // }

  removeTopping(RemovedTopping) { //?????????????????????????????????
    console.log(this.toppings);
     let newToppings = this.toppings.filter(function (topping) {
      return topping !== RemovedTopping;
      // console.log(this.toppings)
      // return this.toppings
    });
    console.log(newToppings);
    return newToppings
  };

  set toppings(callback) {
    this._toppings = callback();
  }
  //  * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ toppings
  //  * –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≥–µ—Ç—Ç–µ—Ä–æ–º —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ obj.toppings –∏ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ–±–∞–≤–æ–∫
  get toppings() {
    return this._toppings;
  }
  //  * –£–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
  //  * –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≥–µ—Ç—Ç–µ—Ä–æ–º —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ obj.size –∏ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç —Ä–∞–∑–º–µ—Ä
  get size() {
    return this._size;
  } 
  //  * –£–∑–Ω–∞—Ç—å –Ω–∞—á–∏–Ω–∫—É –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
  get stuffing() {
    return this._stuffing;
  }
  //  * –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
  //  * –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≥–µ—Ç—Ç–µ—Ä–æ–º —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ obj.price –∏ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç —Å—É–º–º—É.

  // get price() {
  //   return this._price;
  // };
get price() {
  const hamburgerData = Object.assign({}, Hamburger.SIZES, Hamburger.STUFFINGS, Hamburger.TOPPINGS);
    let price = hamburgerData[this.size].price + hamburgerData[this.stuffing].price;
    if (this.toppings.length > 0) {
     price += this.toppings.reduce(function(acc, topping) {
        let toppingsPrice = acc + hamburgerData[topping].price;
        return toppingsPrice
      }, 0)
    }
    return price
};
  // calculatePrice() {
  //   const hamburgerData = Object.assign({}, Hamburger.SIZES, Hamburger.STUFFINGS, Hamburger.TOPPINGS);
  //   let price = hamburgerData[this.size].price + hamburgerData[this.stuffing].price;
  //   if (this.toppings.length > 0) {
  //    price += this.toppings.reduce(function(acc, topping) {
  //       let toppingsPrice = acc + hamburgerData[topping].price;
  //       return toppingsPrice
  //     }, 0)
  //   }
  //   return price
  // };

  // set price (callback) {               ?===–¢–∞–∫ –∫–∞–∫-—Ç–æ –Ω–µ –±—ã–≤–∞–µ—Ç? –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ hamburger.price?===?
  //   this._price = calculatePrice();
  // }

  //  * –£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
  get calories() {
    return this._calories;
  }
  calculateCalories() {
    let calories = Hamburger.SIZES[this.size].calories + Hamburger.STUFFINGS[this.stuffing].calories;
    if (this.toppings.includes(Hamburger.TOPPING_SPICE)) {
      calories += Hamburger.TOPPINGS[Hamburger.TOPPING_SPICE].calories;
    }
    if (this.toppings.includes(Hamburger.TOPPING_SAUCE)) {
      calories += Hamburger.TOPPINGS[Hamburger.TOPPING_SAUCE].calories;
    }
    return calories;
  }
  // –†–∞–∑–º–µ—Ä—ã, –≤–∏–¥—ã –¥–æ–±–∞–≤–æ–∫ –∏ –Ω–∞—á–∏–Ω–æ–∫ –æ–±—ä—è–≤–∏—Ç–µ –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∫–ª–∞—Å—Å–∞.
  // Hamburger.SIZE_SMALL = 'SIZE_SMALL';
  static set(size) {
    Hamburger.SIZE_SMALL = size;
  }
  static set(size) {
    Hamburger.SIZE_LARGE = size;
  }
  // Hamburger.STUFFING_CHEESE = 'STUFFING_CHEESE';
  static set(stuff) {
    Hamburger.STUFFING_CHEESE = stuff;
  }
  static set(stuff) {
    Hamburger.STUFFING_SALAD = stuff;
  }
  static set(stuff) {
    Hamburger.STUFFING_MEAT = stuff;
  }
  // Hamburger.TOPPING_SPICE = 'TOPPING_SPICE';
  static set(topping) {
    Hamburger.TOPPING_SPICE = topping;
  }
  static set(topping) {
    Hamburger.TOPPING_SAUSE = topping;
  }
};

Hamburger.SIZE_SMALL = "SIZE_SMALL";
Hamburger.SIZE_LARGE = "SIZE_LARGE";

Hamburger.SIZES = {
  [Hamburger.SIZE_SMALL]: {
    price: 30,
    calories: 50
  },
  [Hamburger.SIZE_LARGE]: {
    price: 50,
    calories: 100
  }
};

Hamburger.STUFFING_CHEESE = "STUFFING_CHEESE";
Hamburger.STUFFING_SALAD = "STUFFING_SALAD";
Hamburger.STUFFING_MEAT = "STUFFING_MEAT";

Hamburger.STUFFINGS = {
  [Hamburger.STUFFING_CHEESE]: {
    price: 15,
    calories: 20
  },
  [Hamburger.STUFFING_SALAD]: {
    price: 20,
    calories: 5
  },
  [Hamburger.STUFFING_MEAT]: {
    price: 35,
    calories: 15
  }
};

Hamburger.TOPPING_SPICE = "TOPPING_SPICE";
Hamburger.TOPPING_SAUCE = "TOPPING_SAUCE";

Hamburger.TOPPINGS = {
  [Hamburger.TOPPING_SPICE]: {
    price: 10,
    calories: 0
  },
  [Hamburger.TOPPING_SAUCE]: {
    price: 15,
    calories: 5
  }
};

/* –í–æ—Ç –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ */

// –ú–∞–ª–µ–Ω—å–∫–∏–π –≥–∞–º–±—É—Ä–≥–µ—Ä —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ —Å—ã—Ä–∞
const hamburger = new Hamburger(
  Hamburger.SIZE_SMALL,
  Hamburger.STUFFING_MEAT,
);
console.log(hamburger);

// –î–æ–±–∞–≤–∫–∞ –∏–∑ –ø—Ä–∏–ø—Ä–∞–≤—ã
hamburger.addTopping(Hamburger.TOPPING_SPICE);
// hamburger.addTopping(Hamburger.TOPPING_SAUCE);
// hamburger.addTopping(Hamburger.TOPPING_SAUCE);

console.log(hamburger.toppings);
console.log(hamburger.size);
console.log(hamburger.stuffing);
// –°–ø—Ä–æ—Å–∏–º —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –∫–∞–ª–æ—Ä–∏–π
console.log("Calories: ", hamburger.calculateCalories());

// –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?
// console.log("Price: ", hamburger.calculatePrice());
console.log("Get price: ", hamburger.price);

// –Ø —Ç—É—Ç –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ—É—Å
hamburger.addTopping(Hamburger.TOPPING_SAUCE);

// –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç?
// console.log("Price with sauce: ", hamburger.calculatePrice());
console.log("Price with sauce: ", hamburger.price);

console.log("Calories: ", hamburger.calculateCalories());

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–æ–ª—å—à–æ–π –ª–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä?
console.log(
  "Is hamburger large: ",
  hamburger.size === Hamburger.SIZE_LARGE
); // -> false
console.log(
  "Is hamburger large: ",
  hamburger.size === Hamburger.SIZE_SMALL
);

// –£–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–∫—É
hamburger.removeTopping(Hamburger.TOPPING_SPICE);
// console.log(hamburger.removeTopping(Hamburger.TOPPING_SPICE));
// hamburger._toppings = hamburger._toppings(hamburger.removeTopping());
// hamburger.removeTopping(Hamburger.TOPPING_SPICE);
// hamburger.removeTopping(Hamburger.TOPPING_SAUCE);

// –°–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–æ–∫
console.log("Hamburger has %d toppings", hamburger.toppings.length); // 1
console.log("Hamburger has stuffing:", hamburger.stuffing);

/*
  üîî –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:
    	‚úîÔ∏è –∫–ª–∞—Å—Å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º. –≠—Ç–æ –Ω–µ –µ–≥–æ –¥–µ–ª–æ, —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
    		–¥—Ä—É–≥–æ–π –∫–æ–¥, –∞ –∫–ª–∞—Å—Å –∂–∏–≤–µ—Ç –≤ –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –º–∏—Ä–∞
    	‚úîÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∫–∞) –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,
		—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –Ω–µ —É–∫–∞–∑–∞–≤ –∏—Ö
    	‚úîÔ∏è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ (–¥–æ–±–∞–≤–∫–∞) –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
    	‚úîÔ∏è —Ç–∏–ø—ã –Ω–∞—á–∏–Ω–æ–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏" —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ
	    	—Å–≤–æ–π—Å—Ç–≤–∞–º–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å—á–∏—Ç–∞—Ç—å "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏")
    	‚úîÔ∏è –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π.
    	‚úîÔ∏è –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–±—ä–µ–∫—Ç–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ –ª–æ–≥–∏—á–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑–º–µ—Ä, —Ç–∏–ø –Ω–∞—á–∏–Ω–∫–∏),
      		–∞ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∏—Ö (—Ü–µ–Ω–∞, —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π –∏ —Ç.–¥.). –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ü–µ–Ω—É –∏ –∫–∞–ª–æ—Ä–∏–∏
		–ª–æ–≥–∏—á–Ω–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ –Ω–µ –∑–∞—Ä–∞–Ω–µ–µ.
*/

  
  // calculatePrice() {
  //   let price = Hamburger.SIZES[this.size].price + Hamburger.STUFFINGS[this.stuffing].price;
  //   if (this.toppings.includes(Hamburger.TOPPING_SPICE)) {
  //     price += Hamburger.TOPPINGS[Hamburger.TOPPING_SPICE].price;
  //   }
  //   if (this.toppings.includes(Hamburger.TOPPING_SAUCE)) {
  //     price += Hamburger.TOPPINGS[Hamburger.TOPPING_SAUCE].price;
  //   }
  //   return price;
  // };
